<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>每日学习（1）</title>
      <link href="/2024/11/27/mei-ri-xue-xi-1/"/>
      <url>/2024/11/27/mei-ri-xue-xi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode"><a href="#LeetCode" class="headerlink" title="LeetCode"></a>LeetCode</h2><h3 id="8-对称二叉树"><a href="#8-对称二叉树" class="headerlink" title="8. 对称二叉树"></a>8. 对称二叉树</h3><p>左右子树反转完全相等就是对称，左边顺序为中左右，右边顺序为中右左。</p><h3 id="12-平衡二叉树"><a href="#12-平衡二叉树" class="headerlink" title="12. 平衡二叉树"></a>12. 平衡二叉树</h3><p>递归三部曲：</p><ol><li>确定参数和返回值</li><li>确定终止条件</li><li>确定单层递归逻辑</li></ol><p>1.参数为节点，返回值为以该节点为根节点的树的高度（不是平衡二叉树返回-1）</p><p>2.空节点就终止</p><p>3.左子树高度，右子树高度，相差是否&lt;&#x3D;1</p><h2 id="小林coding"><a href="#小林coding" class="headerlink" title="小林coding"></a>小林coding</h2><h3 id="HTTP-1-1、HTTP-2、HTTP-3-演变"><a href="#HTTP-1-1、HTTP-2、HTTP-3-演变" class="headerlink" title="HTTP&#x2F;1.1、HTTP&#x2F;2、HTTP&#x2F;3 演变"></a>HTTP&#x2F;1.1、HTTP&#x2F;2、HTTP&#x2F;3 演变</h3><h4 id="HTTP-1-1-相比-HTTP-1-0-提高了什么性能"><a href="#HTTP-1-1-相比-HTTP-1-0-提高了什么性能" class="headerlink" title="HTTP&#x2F;1.1 相比 HTTP&#x2F;1.0 提高了什么性能"></a>HTTP&#x2F;1.1 相比 HTTP&#x2F;1.0 提高了什么性能</h4><p>（1）使用长连接</p><p>（2）支持管道网络传输（请求发出去不必等返回就可再发送请求）</p><h4 id="HTTP-2-做了什么优化？"><a href="#HTTP-2-做了什么优化？" class="headerlink" title="HTTP&#x2F;2 做了什么优化？"></a>HTTP&#x2F;2 做了什么优化？</h4><p>HTTP&#x2F;2是基于https</p><p>（1）压缩头部：用索引号代替重复字段</p><p>（2）二进制格式：head和body都变成二进制（帧）</p><p>（3）并发传输：同一个tcp连接传多个stream（多个头＋体），即并行交错进行请求和响应，避免响应的队头阻塞</p><p>（4）服务器推送：服务器主动发送信息给客户端</p>]]></content>
      
      
      <categories>
          
          <category> 每日学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode（二叉树） </tag>
            
            <tag> 小林coding（计算机网络） </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
